//
// Software Name: OUDS Flutter
// SPDX-FileCopyrightText: Copyright (c) Orange SA
// SPDX-License-Identifier: MIT
//
// This software is distributed under the MIT license,
// the text of which is available at https://opensource.org/license/MIT/
// or see the "LICENSE" file for more details.
//
// Software description: Flutter library of reusable graphical components
//

// Tokens version 1.1.0
// Generated by Tokenator

import 'package:flutter/material.dart';
import 'package:ouds_theme_contract/ouds_tokens_provider.dart';

class OudsButtonMonoTokens {
  final Color colorBgDefaultDisabled;
  final Color colorBgDefaultEnabled;
  final Color colorBgDefaultFocus;
  final Color colorBgDefaultHover;
  final Color colorBgDefaultLoading;
  final Color colorBgDefaultPressed;
  final Color colorBgMinimalDisabled;
  final Color colorBgMinimalEnabled;
  final Color colorBgMinimalFocus;
  final Color colorBgMinimalHover;
  final Color colorBgMinimalLoading;
  final Color colorBgMinimalPressed;
  final Color colorBgStrongDisabled;
  final Color colorBgStrongEnabled;
  final Color colorBgStrongFocus;
  final Color colorBgStrongHover;
  final Color colorBgStrongLoading;
  final Color colorBgStrongPressed;
  final Color colorBorderDefaultDisabled;
  final Color colorBorderDefaultEnabled;
  final Color colorBorderDefaultFocus;
  final Color colorBorderDefaultHover;
  final Color colorBorderDefaultLoading;
  final Color colorBorderDefaultPressed;
  final Color colorBorderMinimalDisabled;
  final Color colorBorderMinimalEnabled;
  final Color colorBorderMinimalFocus;
  final Color colorBorderMinimalHover;
  final Color colorBorderMinimalLoading;
  final Color colorBorderMinimalPressed;
  final Color colorBorderStrongDisabled;
  final Color colorBorderStrongEnabled;
  final Color colorBorderStrongFocus;
  final Color colorBorderStrongHover;
  final Color colorBorderStrongLoading;
  final Color colorBorderStrongPressed;
  final Color colorContentDefaultDisabled;
  final Color colorContentDefaultEnabled;
  final Color colorContentDefaultFocus;
  final Color colorContentDefaultHover;
  final Color colorContentDefaultLoading;
  final Color colorContentDefaultPressed;
  final Color colorContentMinimalDisabled;
  final Color colorContentMinimalEnabled;
  final Color colorContentMinimalFocus;
  final Color colorContentMinimalHover;
  final Color colorContentMinimalLoading;
  final Color colorContentMinimalPressed;
  final Color colorContentStrongDisabled;
  final Color colorContentStrongEnabled;
  final Color colorContentStrongFocus;
  final Color colorContentStrongHover;
  final Color colorContentStrongLoading;
  final Color colorContentStrongPressed;

  OudsButtonMonoTokens({
    required OudsProvidersTokens providersTokens,
    Color? colorBgDefaultDisabled,
    Color? colorBgDefaultEnabled,
    Color? colorBgDefaultFocus,
    Color? colorBgDefaultHover,
    Color? colorBgDefaultLoading,
    Color? colorBgDefaultPressed,
    Color? colorBgMinimalDisabled,
    Color? colorBgMinimalEnabled,
    Color? colorBgMinimalFocus,
    Color? colorBgMinimalHover,
    Color? colorBgMinimalLoading,
    Color? colorBgMinimalPressed,
    Color? colorBgStrongDisabled,
    Color? colorBgStrongEnabled,
    Color? colorBgStrongFocus,
    Color? colorBgStrongHover,
    Color? colorBgStrongLoading,
    Color? colorBgStrongPressed,
    Color? colorBorderDefaultDisabled,
    Color? colorBorderDefaultEnabled,
    Color? colorBorderDefaultFocus,
    Color? colorBorderDefaultHover,
    Color? colorBorderDefaultLoading,
    Color? colorBorderDefaultPressed,
    Color? colorBorderMinimalDisabled,
    Color? colorBorderMinimalEnabled,
    Color? colorBorderMinimalFocus,
    Color? colorBorderMinimalHover,
    Color? colorBorderMinimalLoading,
    Color? colorBorderMinimalPressed,
    Color? colorBorderStrongDisabled,
    Color? colorBorderStrongEnabled,
    Color? colorBorderStrongFocus,
    Color? colorBorderStrongHover,
    Color? colorBorderStrongLoading,
    Color? colorBorderStrongPressed,
    Color? colorContentDefaultDisabled,
    Color? colorContentDefaultEnabled,
    Color? colorContentDefaultFocus,
    Color? colorContentDefaultHover,
    Color? colorContentDefaultLoading,
    Color? colorContentDefaultPressed,
    Color? colorContentMinimalDisabled,
    Color? colorContentMinimalEnabled,
    Color? colorContentMinimalFocus,
    Color? colorContentMinimalHover,
    Color? colorContentMinimalLoading,
    Color? colorContentMinimalPressed,
    Color? colorContentStrongDisabled,
    Color? colorContentStrongEnabled,
    Color? colorContentStrongFocus,
    Color? colorContentStrongHover,
    Color? colorContentStrongLoading,
    Color? colorContentStrongPressed
  }) :
    colorBgDefaultDisabled = colorBgDefaultDisabled ?? providersTokens.colorScheme.opacityTransparent,
    colorBgDefaultEnabled = colorBgDefaultEnabled ?? providersTokens.colorScheme.opacityTransparent,
    colorBgDefaultFocus = colorBgDefaultFocus ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackHigher, providersTokens.colorScheme.repositoryOpacityWhiteHigher),
    colorBgDefaultHover = colorBgDefaultHover ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackHigher, providersTokens.colorScheme.repositoryOpacityWhiteHigher),
    colorBgDefaultLoading = colorBgDefaultLoading ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityWhiteHigher, providersTokens.colorScheme.repositoryOpacityBlackHigher),
    colorBgDefaultPressed = colorBgDefaultPressed ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityWhiteHigher, providersTokens.colorScheme.repositoryOpacityBlackHigher),
    colorBgMinimalDisabled = colorBgMinimalDisabled ?? providersTokens.colorScheme.opacityTransparent,
    colorBgMinimalEnabled = colorBgMinimalEnabled ?? providersTokens.colorScheme.opacityTransparent,
    colorBgMinimalFocus = colorBgMinimalFocus ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackHigher, providersTokens.colorScheme.repositoryOpacityWhiteHigher),
    colorBgMinimalHover = colorBgMinimalHover ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackHigher, providersTokens.colorScheme.repositoryOpacityWhiteHigher),
    colorBgMinimalLoading = colorBgMinimalLoading ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityWhiteHigher, providersTokens.colorScheme.repositoryOpacityBlackHigher),
    colorBgMinimalPressed = colorBgMinimalPressed ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityWhiteHigher, providersTokens.colorScheme.repositoryOpacityBlackHigher),
    colorBgStrongDisabled = colorBgStrongDisabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackMedium, providersTokens.colorScheme.repositoryOpacityWhiteMedium),
    colorBgStrongEnabled = colorBgStrongEnabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite),
    colorBgStrongFocus = colorBgStrongFocus ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackHigher, providersTokens.colorScheme.repositoryOpacityWhiteHigher),
    colorBgStrongHover = colorBgStrongHover ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackHigher, providersTokens.colorScheme.repositoryOpacityWhiteHigher),
    colorBgStrongLoading = colorBgStrongLoading ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityWhiteHigher, providersTokens.colorScheme.repositoryOpacityBlackHigher),
    colorBgStrongPressed = colorBgStrongPressed ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityWhiteHigher, providersTokens.colorScheme.repositoryOpacityBlackHigher),
    colorBorderDefaultDisabled = colorBorderDefaultDisabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackMedium, providersTokens.colorScheme.repositoryOpacityWhiteMedium),
    colorBorderDefaultEnabled = colorBorderDefaultEnabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite),
    colorBorderDefaultFocus = colorBorderDefaultFocus ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderDefaultHover = colorBorderDefaultHover ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderDefaultLoading = colorBorderDefaultLoading ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderDefaultPressed = colorBorderDefaultPressed ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderMinimalDisabled = colorBorderMinimalDisabled ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderMinimalEnabled = colorBorderMinimalEnabled ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderMinimalFocus = colorBorderMinimalFocus ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderMinimalHover = colorBorderMinimalHover ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderMinimalLoading = colorBorderMinimalLoading ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderMinimalPressed = colorBorderMinimalPressed ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderStrongDisabled = colorBorderStrongDisabled ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderStrongEnabled = colorBorderStrongEnabled ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderStrongFocus = colorBorderStrongFocus ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderStrongHover = colorBorderStrongHover ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderStrongLoading = colorBorderStrongLoading ?? providersTokens.colorScheme.opacityTransparent,
    colorBorderStrongPressed = colorBorderStrongPressed ?? providersTokens.colorScheme.opacityTransparent,
    colorContentDefaultDisabled = colorContentDefaultDisabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackMedium, providersTokens.colorScheme.repositoryOpacityWhiteMedium),
    colorContentDefaultEnabled = colorContentDefaultEnabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite),
    colorContentDefaultFocus = colorContentDefaultFocus ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralMutedWhite, providersTokens.colorScheme.repositoryNeutralEmphasizedBlack),
    colorContentDefaultHover = colorContentDefaultHover ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralMutedWhite, providersTokens.colorScheme.repositoryNeutralEmphasizedBlack),
    colorContentDefaultLoading = colorContentDefaultLoading ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite),
    colorContentDefaultPressed = colorContentDefaultPressed ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite),
    colorContentMinimalDisabled = colorContentMinimalDisabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityBlackMedium, providersTokens.colorScheme.repositoryOpacityWhiteMedium),
    colorContentMinimalEnabled = colorContentMinimalEnabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite),
    colorContentMinimalFocus = colorContentMinimalFocus ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralMutedWhite, providersTokens.colorScheme.repositoryNeutralEmphasizedBlack),
    colorContentMinimalHover = colorContentMinimalHover ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralMutedWhite, providersTokens.colorScheme.repositoryNeutralEmphasizedBlack),
    colorContentMinimalLoading = colorContentMinimalLoading ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite),
    colorContentMinimalPressed = colorContentMinimalPressed ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite),
    colorContentStrongDisabled = colorContentStrongDisabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryOpacityWhiteHigh, providersTokens.colorScheme.repositoryOpacityBlackMediumHigh),
    colorContentStrongEnabled = colorContentStrongEnabled ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralMutedWhite, providersTokens.colorScheme.repositoryNeutralEmphasizedBlack),
    colorContentStrongFocus = colorContentStrongFocus ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralMutedWhite, providersTokens.colorScheme.repositoryNeutralEmphasizedBlack),
    colorContentStrongHover = colorContentStrongHover ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralMutedWhite, providersTokens.colorScheme.repositoryNeutralEmphasizedBlack),
    colorContentStrongLoading = colorContentStrongLoading ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite),
    colorContentStrongPressed = colorContentStrongPressed ?? providersTokens.colorScheme.lightDark(providersTokens.colorScheme.repositoryNeutralEmphasizedBlack, providersTokens.colorScheme.repositoryNeutralMutedWhite);
}
